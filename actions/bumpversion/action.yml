name: 'Bump and changelog using commitizen'
description: 'Create a commit bumping the version of your project and creating a changelog file'
runs:
  using: 'composite'
  steps:
    # Step 1: Set up Python environment using Poetry
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # Step 2: Install Poetry
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
      shell: bash

    # Step 3: Install dependencies with Poetry
    - name: Install dependencies
      run: |
        poetry install
      shell: bash

    - name: Git branch
      run: |
        echo "Git branch"
        git branch
      shell: bash

    # Step 4: Execute bump version (for develop)
    - name: Bump version
      run: |
        echo "Bump version"
        git config --global user.email "username@users.noreply.github.com"
        git config --global user.name "Continuous Integration"
        poetry run cz bump --prerelease alpha
        git tag "v$(poetry run cz version)"
      shell: bash

    - name: Push updated version
      run: |
        echo "Push updated version"
        git branch
        git push origin HEAD:feature/18-ci-cd-build-pipeline-with-github-actions
        git push --tags
      shell: bash

    - name: Push created tags
      run: |
        echo "Push created tags"
        git push --tags
      shell: bash


branding:
  icon: 'git-commit'
  color: 'purple'
outputs:
  version:
    description: 'New version'
inputs:
  dry_run:
    description: 'Run without creating commit, output to stdout'
    required: false
  commit:
    description: 'If true a commit is created containing the bump changes'
    required: false
    default: "true"
  push:
    description: 'If true the bump commit is pushed to the remote repository'
    required: false
    default: "true"
  merge:
    description: >
      If true, the bump commit is pushed to the remote repository even when the
      action is run on the pull_request event, immediately merging the pull request
    required: false
    default: "false"
  prerelease:
    description: 'Set as prerelease version'
    required: false
  devrelease:
    description: 'Non-negative integer for dev. release'
    required: false
  local_version:
    description: 'Bump only the local version portion'
    required: false
    default: "false"
  changelog:
    description: 'Create changelog when bumping the version'
    default: "true"
    required: false
  github_token:
    description: 'Token for the repo. Can be passed in using $\{{ secrets.GITHUB_TOKEN }}'
    required: false
  repository:
    description: 'Repository name to push. Default or empty value represents current github repository (${GITHUB_REPOSITORY})'
    default: ''
    required: false
  branch:
    description: 'Destination branch to push changes'
    required: false
    default: ''
  extra_requirements:
    description: 'Extra commitizen dependencies like your custom plugins or rules'
    required: false
    default: ''
  changelog_increment_filename:
    description: 'Filename to store the incremented generated changelog. This is different to changelog as it only contains the changes for the just generated version'
    required: false
  git_redirect_stderr:
    description: 'Redirect git output to stderr. Useful if you do not want git output in your changelog'
    required: false
    default: "false"
  git_name:
    description: 'Name used to configure git (for git operations)'
    required: false
    default: 'github-actions[bot]'
  git_email:
    description: 'Email address used to configure git (for git operations)'
    required: false
    default: 'github-actions[bot]@users.noreply.github.com'
  commitizen_version:
    description: 'Specify the version to be used by commitizen'
    required: false
    default: latest
  no_raise:
    description: "Don't raise the given comma-delimited exit codes"
    required: false
    default: '21'
  increment:
    description: "Manually specify the desired increment"
    required: false
  check_consistency:
    default: 'false'
    description: "check consistency among versions defined in commitizen configuration and version_files"
    required: false
  gpg_sign:
    description: >
      If true, use GPG to sign commits and tags (for git operations). Requires separate
      setup of GPG key and passphrase in GitHub Actions (e.g. with the action
      crazy-max/ghaction-import-gpg)
    required: false
    default: "false"
  debug:
    description: "If true, prints debug output to GitHub Actions stdout."
    required: false
    default: "false"